/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javadesimulator2;

import com.google.common.io.Files;

import imgui.ImFontConfig;
import imgui.ImGui;
import imgui.ImGuiIO;
import imgui.ImGuiStyle;
import imgui.app.Application;
import imgui.app.Configuration;
import imgui.extension.imguifiledialog.ImGuiFileDialog;
import imgui.extension.imguifiledialog.flag.ImGuiFileDialogFlags;
import imgui.flag.ImGuiCol;
import imgui.flag.ImGuiColorEditFlags;
import imgui.flag.ImGuiConfigFlags;
import imgui.flag.ImGuiStyleVar;

import java.util.Map;
import javadesimulator2.GUI.*;

public class App extends Application {
  @Override
  protected void configure(Configuration config) {
    config.setTitle("Dear ImGui is Awesome!");
  }

  private void setImGuiStyle() {
    ImGuiStyle style = ImGui.getStyle();
    style.setColor(ImGuiCol.Text, 1.00f, 1.00f, 1.00f, 1.00f);
    style.setColor(ImGuiCol.TextDisabled, 0.50f, 0.50f, 0.50f, 1.00f);
    style.setColor(ImGuiCol.WindowBg, 0.13f, 0.14f, 0.15f, 1.00f);
    style.setColor(ImGuiCol.ChildBg, 0.13f, 0.14f, 0.15f, 1.00f);
    style.setColor(ImGuiCol.PopupBg, 0.13f, 0.14f, 0.15f, 1.00f);
    style.setColor(ImGuiCol.Border, 0.43f, 0.43f, 0.50f, 0.50f);
    style.setColor(ImGuiCol.BorderShadow, 0.00f, 0.00f, 0.00f, 0.00f);
    style.setColor(ImGuiCol.FrameBg, 0.25f, 0.25f, 0.25f, 1.00f);
    style.setColor(ImGuiCol.FrameBgHovered, 0.38f, 0.38f, 0.38f, 1.00f);
    style.setColor(ImGuiCol.FrameBgActive, 0.67f, 0.67f, 0.67f, 0.39f);
    style.setColor(ImGuiCol.TitleBg, 0.08f, 0.08f, 0.09f, 1.00f);
    style.setColor(ImGuiCol.TitleBgActive, 0.08f, 0.08f, 0.09f, 1.00f);
    style.setColor(ImGuiCol.TitleBgCollapsed, 0.00f, 0.00f, 0.00f, 0.51f);
    style.setColor(ImGuiCol.MenuBarBg, 0.14f, 0.14f, 0.14f, 1.00f);
    style.setColor(ImGuiCol.ScrollbarBg, 0.02f, 0.02f, 0.02f, 0.53f);
    style.setColor(ImGuiCol.ScrollbarGrab, 0.31f, 0.31f, 0.31f, 1.00f);
    style.setColor(ImGuiCol.ScrollbarGrabHovered, 0.41f, 0.41f, 0.41f, 1.00f);
    style.setColor(ImGuiCol.ScrollbarGrabActive, 0.51f, 0.51f, 0.51f, 1.00f);
    style.setColor(ImGuiCol.CheckMark, 0.11f, 0.64f, 0.92f, 1.00f);
    style.setColor(ImGuiCol.SliderGrab, 0.11f, 0.64f, 0.92f, 1.00f);
    style.setColor(ImGuiCol.SliderGrabActive, 0.08f, 0.50f, 0.72f, 1.00f);
    style.setColor(ImGuiCol.Button, 0.25f, 0.25f, 0.25f, 1.00f);
    style.setColor(ImGuiCol.ButtonHovered, 0.38f, 0.38f, 0.38f, 1.00f);
    style.setColor(ImGuiCol.ButtonActive, 0.67f, 0.67f, 0.67f, 0.39f);
    style.setColor(ImGuiCol.Header, 0.22f, 0.22f, 0.22f, 1.00f);
    style.setColor(ImGuiCol.HeaderHovered, 0.25f, 0.25f, 0.25f, 1.00f);
    style.setColor(ImGuiCol.HeaderActive, 0.67f, 0.67f, 0.67f, 0.39f);
    style.setColor(ImGuiCol.Separator, 0.43f, 0.43f, 0.50f, 0.50f);
    style.setColor(ImGuiCol.SeparatorHovered, 0.41f, 0.42f, 0.44f, 1.00f);
    style.setColor(ImGuiCol.SeparatorActive, 0.26f, 0.59f, 0.98f, 0.95f);
    style.setColor(ImGuiCol.ResizeGrip, 0.00f, 0.00f, 0.00f, 0.00f);
    style.setColor(ImGuiCol.ResizeGripHovered, 0.29f, 0.30f, 0.31f, 0.67f);
    style.setColor(ImGuiCol.ResizeGripActive, 0.26f, 0.59f, 0.98f, 0.95f);
    style.setColor(ImGuiCol.Tab, 0.08f, 0.08f, 0.09f, 0.83f);
    style.setColor(ImGuiCol.TabHovered, 0.33f, 0.34f, 0.36f, 0.83f);
    style.setColor(ImGuiCol.TabActive, 0.23f, 0.23f, 0.24f, 1.00f);
    style.setColor(ImGuiCol.TabUnfocused, 0.08f, 0.08f, 0.09f, 1.00f);
    style.setColor(ImGuiCol.TabUnfocusedActive, 0.13f, 0.14f, 0.15f, 1.00f);
    style.setColor(ImGuiCol.DockingPreview, 0.26f, 0.59f, 0.98f, 0.70f);
    style.setColor(ImGuiCol.DockingEmptyBg, 0.20f, 0.20f, 0.20f, 1.00f);
    style.setColor(ImGuiCol.PlotLines, 0.61f, 0.61f, 0.61f, 1.00f);
    style.setColor(ImGuiCol.PlotLinesHovered, 1.00f, 0.43f, 0.35f, 1.00f);
    style.setColor(ImGuiCol.PlotHistogram, 0.90f, 0.70f, 0.00f, 1.00f);
    style.setColor(ImGuiCol.PlotHistogramHovered, 1.00f, 0.60f, 0.00f, 1.00f);
    style.setColor(ImGuiCol.TextSelectedBg, 0.26f, 0.59f, 0.98f, 0.35f);
    style.setColor(ImGuiCol.DragDropTarget, 0.11f, 0.64f, 0.92f, 1.00f);
    style.setColor(ImGuiCol.NavHighlight, 0.26f, 0.59f, 0.98f, 1.00f);
    style.setColor(ImGuiCol.NavWindowingHighlight, 1.00f, 1.00f, 1.00f, 0.70f);
    style.setColor(ImGuiCol.NavWindowingDimBg, 0.80f, 0.80f, 0.80f, 0.20f);
    style.setColor(ImGuiCol.ModalWindowDimBg, 0.80f, 0.80f, 0.80f, 0.35f);
    style.setGrabRounding(2.3f);
    style.setFrameRounding(2.3f);
  }

  @Override
  protected void initImGui(final Configuration config) {
    super.initImGui(config);
    final ImGuiIO io = ImGui.getIO();
    io.addConfigFlags(ImGuiConfigFlags.DockingEnable); // Enable Docking
    io.addConfigFlags(ImGuiConfigFlags.ViewportsEnable);

    // io.setIniFilename(null);
    io.getFonts().addFontFromFileTTF("../resources/Arial.ttf", 15.0f);
    setImGuiStyle();

    nodeEditor = new NodeEditor();
  }

  public void openFileDialog(String id, String title) {
    ImGuiFileDialog.openDialog(id, title, ".jde2", ".", "", 1, 0, ImGuiFileDialogFlags.None);
  }

  public void save() {
    if (nodeEditor.getLastSavePath() == null) {
      openFileDialog("browse-save", "Save As");
    } else {
      nodeEditor.serialize(nodeEditor.getLastSavePath());
    }
  }

  @Override
  public void process() {
    ImGui.dockSpaceOverViewport();

    ImGui.beginMainMenuBar();
    if (ImGui.beginMenu("File")) {

      if (ImGui.menuItem("save as")) {
        openFileDialog("browse-save", "Save As");
      }

      if (ImGui.menuItem("save")) {
        save();
      }

      if (ImGui.menuItem("open")) {
        openFileDialog("browse-open", "Open");
      }

      if (ImGui.menuItem("new project")) {
        save();
        nodeEditor.newSchematic(Schematic.Type.ROOT);
      }

      if (ImGui.menuItem("new component")) {
        save();
        nodeEditor.newSchematic(Schematic.Type.COMPONENT);
      }

      if (ImGui.menuItem("optimize IDs")) {
        nodeEditor.optimizeIDs();
      }

      ImGui.endMenu();
    }

    ImGui.endMainMenuBar();

    if (ImGuiFileDialog.display("browse-save", ImGuiFileDialogFlags.None, 200, 400, 800, 600)) {
      if (ImGuiFileDialog.isOk()) {
        Map<String, String> filenames = ImGuiFileDialog.getSelection();
        if (filenames != null && filenames.size() > 0) {
          nodeEditor.serialize(filenames.values().stream().findFirst().get());
        } else if (ImGuiFileDialog.getFilePathName() != null
            && ImGuiFileDialog.getFilePathName().length() > 0) {
          String path = ImGuiFileDialog.getFilePathName();
          String extension = Files.getFileExtension(path);
          if (!extension.equals("jde2")) {
            path = path + ".jde2";
          }
          nodeEditor.serialize(path);
        }
      }
      ImGuiFileDialog.close();
    }

    if (ImGuiFileDialog.display("browse-open", ImGuiFileDialogFlags.None, 200, 400, 800, 600)) {
      if (ImGuiFileDialog.isOk()) {
        Map<String, String> filenames = ImGuiFileDialog.getSelection();
        if (filenames != null && filenames.size() > 0) {
          nodeEditor.load(filenames.values().stream().findFirst().get());
        }
      }
      ImGuiFileDialog.close();
    }

    nodeEditor.showSidebar(true);

    nodeEditor.show(true);
  }

  public static void main(String[] args) {
    launch(new App());
  }

  private NodeEditor nodeEditor = null;
}
