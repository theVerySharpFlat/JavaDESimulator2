/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */
import org.gradle.internal.os.OperatingSystem

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}


project.ext.lwjglVersion = "3.3.2"

def osName;

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
        osName = "linux"
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
        osName = "macos"
		project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
		break
	case OperatingSystem.WINDOWS:
        osName = "windows"
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    lwjglVersion = '3.3.1'
    imguiVersion = "1.86.10"
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation "io.github.spair:imgui-java-app:1.86.10"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

   implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-opengl"
	implementation "org.lwjgl:lwjgl-stb"
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"

    implementation "io.github.spair:imgui-java-natives-$osName:$imguiVersion"

    implementation 'org.reflections:reflections:0.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.15.0'
 
    /*implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
    
    implementation "io.github.spair:imgui-java-natives-windows:$imguiVersion"*/
}

application {
    // Define the main class for the application.
    mainClass = 'javadesimulator2.App'

    if (OperatingSystem.current() == OperatingSystem.MAC_OS)
    	applicationDefaultJvmArgs = ['-XstartOnFirstThread'] //'-javaagent:' + project.rootDir + '/debug-util/lwjglx-debug-1.0.0.jar'];
    else {
        // applicationDefaultJvmArgs = ['-javaagent:' + project.rootDir + '/debug-util/lwjglx-debug-1.0.0.jar']
    }

}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
